// // Height & Width
//

// Full screen height minus stickyheader height for large screen only

@media (min-width: 992px) {
  .min-vh-stickyheader {
    min-height: calc(100vh - #{$header-height});
  }
}

// Generate minimum height and width classes
@each $size in (10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 85, 90, 100) {
  .min-vh-#{$size} {
    min-height: #{$size}vh;
  }
  .min-vw-#{$size} {
    min-width: #{$size}vw;
  }
  .vh-#{$size} {
    height: #{$size}vh;
  }
  .vw-#{$size} {
    width: #{$size}vw;
  }
  .max-vh-#{$size} {
    max-height: #{$size}vh;
  }
  .max-vw-#{$size} {
    max-width: #{$size}vw;
  }
}

// Create responsive classes for each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    @each $size in (10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 85, 90, 100) {
      .min-vh#{$infix}-#{$size} {
        min-height: #{$size}vh;
      }
      .min-vw#{$infix}-#{$size} {
        min-width: #{$size}vw;
      }
      .vh#{$infix}-#{$size} {
        height: #{$size}vh;
      }
      .vw#{$infix}-#{$size} {
        width: #{$size}vw;
      }
      .max-vh#{$infix}-#{$size} {
        max-height: #{$size}vh;
      }
      .max-vw#{$infix}-#{$size} {
        max-width: #{$size}vw;
      }
    }
  }
}

// Top

.top-4 {top: 4rem;}
.top-5 {top: 5rem;}
.top-6 {top: 6rem;}
.top-7 {top: 7rem;}
.top-8 {top: 8rem;}

// Lists

.row > ul, .row > ol {
  padding-left: 2rem !important;
}

// // Borders
//

@mixin border-theme($direction, $color, $width: 0.375rem) {
    @if $direction == 'start' {
        border-left-width: $width;
        border-left-style: solid;
        border-left-color: $color;
    } @else if $direction == 'top' {
        border-top-width: $width;
        border-top-style: solid;
        border-top-color: $color;
    } @else if $direction == 'end' {
        border-right-width: $width;
        border-right-style: solid;
        border-right-color: $color;
    } @else if $direction == 'bottom' {
        border-bottom-width: $width;
        border-bottom-style: solid;
        border-bottom-color: $color;
    }
}

@each $color-name, $color-value in $theme-colors {
    .border-start-#{$color-name} {
        @include border-theme('start', $color-value);
    }
    .border-top-#{$color-name} {
        @include border-theme('top', $color-value);
    }
    .border-end-#{$color-name} {
        @include border-theme('end', $color-value);
    }
    .border-bottom-#{$color-name} {
        @include border-theme('bottom', $color-value);
    }
}
